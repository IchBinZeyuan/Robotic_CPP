// Generated by gencpp from file gruppe3/signal_transfer.msg
// DO NOT EDIT!


#ifndef GRUPPE3_MESSAGE_SIGNAL_TRANSFER_H
#define GRUPPE3_MESSAGE_SIGNAL_TRANSFER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gruppe3
{
template <class ContainerAllocator>
struct signal_transfer_
{
  typedef signal_transfer_<ContainerAllocator> Type;

  signal_transfer_()
    : detectionstart(false)
    , gamestart(false)
    , stop(false)
    , true_a(0.0)
    , true_b(0.0)
    , T_color(0)  {
    }
  signal_transfer_(const ContainerAllocator& _alloc)
    : detectionstart(false)
    , gamestart(false)
    , stop(false)
    , true_a(0.0)
    , true_b(0.0)
    , T_color(0)  {
  (void)_alloc;
    }



   typedef uint8_t _detectionstart_type;
  _detectionstart_type detectionstart;

   typedef uint8_t _gamestart_type;
  _gamestart_type gamestart;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef double _true_a_type;
  _true_a_type true_a;

   typedef double _true_b_type;
  _true_b_type true_b;

   typedef int8_t _T_color_type;
  _T_color_type T_color;





  typedef boost::shared_ptr< ::gruppe3::signal_transfer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gruppe3::signal_transfer_<ContainerAllocator> const> ConstPtr;

}; // struct signal_transfer_

typedef ::gruppe3::signal_transfer_<std::allocator<void> > signal_transfer;

typedef boost::shared_ptr< ::gruppe3::signal_transfer > signal_transferPtr;
typedef boost::shared_ptr< ::gruppe3::signal_transfer const> signal_transferConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gruppe3::signal_transfer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gruppe3::signal_transfer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gruppe3

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'gruppe3': ['/home/ge34caj/catkin_ws_test/src/gruppe3/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gruppe3::signal_transfer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gruppe3::signal_transfer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gruppe3::signal_transfer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gruppe3::signal_transfer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gruppe3::signal_transfer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gruppe3::signal_transfer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gruppe3::signal_transfer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b8d9240a4bf9c05c0ffc88fd32a8535";
  }

  static const char* value(const ::gruppe3::signal_transfer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b8d9240a4bf9c05ULL;
  static const uint64_t static_value2 = 0xc0ffc88fd32a8535ULL;
};

template<class ContainerAllocator>
struct DataType< ::gruppe3::signal_transfer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gruppe3/signal_transfer";
  }

  static const char* value(const ::gruppe3::signal_transfer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gruppe3::signal_transfer_<ContainerAllocator> >
{
  static const char* value()
  {
    return " \n\
bool  detectionstart        # bool detect_start signal\n\
bool  gamestart             # bool game_start signal\n\
bool  stop                  # bool stop_signal\n\
float64 true_a              # float default_a\n\
float64 true_b              # float default_b\n\
int8  T_color               # int8 default_color 0 yellow, 1 blue\n\
\n\
\n\
";
  }

  static const char* value(const ::gruppe3::signal_transfer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gruppe3::signal_transfer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detectionstart);
      stream.next(m.gamestart);
      stream.next(m.stop);
      stream.next(m.true_a);
      stream.next(m.true_b);
      stream.next(m.T_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct signal_transfer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gruppe3::signal_transfer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gruppe3::signal_transfer_<ContainerAllocator>& v)
  {
    s << indent << "detectionstart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detectionstart);
    s << indent << "gamestart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gamestart);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "true_a: ";
    Printer<double>::stream(s, indent + "  ", v.true_a);
    s << indent << "true_b: ";
    Printer<double>::stream(s, indent + "  ", v.true_b);
    s << indent << "T_color: ";
    Printer<int8_t>::stream(s, indent + "  ", v.T_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRUPPE3_MESSAGE_SIGNAL_TRANSFER_H
