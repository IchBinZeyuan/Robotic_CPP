# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robottest/signal_transfer.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class signal_transfer(genpy.Message):
  _md5sum = "1b8d9240a4bf9c05c0ffc88fd32a8535"
  _type = "robottest/signal_transfer"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ 
bool  detectionstart        # bool detect_start signal
bool  gamestart             # bool game_start signal
bool  stop                  # bool stop_signal
float64 true_a              # float default_a
float64 true_b              # float default_b
int8  T_color               # int8 default_color 0 yellow, 1 blue


"""
  __slots__ = ['detectionstart','gamestart','stop','true_a','true_b','T_color']
  _slot_types = ['bool','bool','bool','float64','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detectionstart,gamestart,stop,true_a,true_b,T_color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(signal_transfer, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detectionstart is None:
        self.detectionstart = False
      if self.gamestart is None:
        self.gamestart = False
      if self.stop is None:
        self.stop = False
      if self.true_a is None:
        self.true_a = 0.
      if self.true_b is None:
        self.true_b = 0.
      if self.T_color is None:
        self.T_color = 0
    else:
      self.detectionstart = False
      self.gamestart = False
      self.stop = False
      self.true_a = 0.
      self.true_b = 0.
      self.T_color = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B2db().pack(_x.detectionstart, _x.gamestart, _x.stop, _x.true_a, _x.true_b, _x.T_color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.detectionstart, _x.gamestart, _x.stop, _x.true_a, _x.true_b, _x.T_color,) = _get_struct_3B2db().unpack(str[start:end])
      self.detectionstart = bool(self.detectionstart)
      self.gamestart = bool(self.gamestart)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B2db().pack(_x.detectionstart, _x.gamestart, _x.stop, _x.true_a, _x.true_b, _x.T_color))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.detectionstart, _x.gamestart, _x.stop, _x.true_a, _x.true_b, _x.T_color,) = _get_struct_3B2db().unpack(str[start:end])
      self.detectionstart = bool(self.detectionstart)
      self.gamestart = bool(self.gamestart)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B2db = None
def _get_struct_3B2db():
    global _struct_3B2db
    if _struct_3B2db is None:
        _struct_3B2db = struct.Struct("<3B2db")
    return _struct_3B2db
